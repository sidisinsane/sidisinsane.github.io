---
import { getCollection, getEntry } from "astro:content";
import { sortBySlug } from "../../lib/utils/index.ts";

import type { CollectionEntry } from "astro:content";
import type { CollectionPaginationProps } from "../../lib/utils/index.ts";

import Layout from "../../layouts/BaseLayout.astro";

import Header from "../../components/Header.astro";
import CollectionPagination from "../../components/CollectionPagination.astro";
import Byline from "../../components/Byline.astro";
import Debug from "../../components/Debug.astro";

interface Props extends CollectionPaginationProps {
  entry: CollectionEntry<"udhr">;
}

export async function getStaticPaths() {
  const entries = await getCollection("udhr", ({ data }) => {
    return data.isDraft !== true;
  });

  return entries.sort(sortBySlug).map((entry, index) => ({
    params: { slug: entry.slug },
    props: {
      index: index,
      entry: entry,
      total: entries.length,
      prev: index - 1 >= 0 ? entries[index - 1] : null,
      next: index + 1 <= entries.length ? entries[index + 1] : null,
    },
  }));
}

const { entry } = Astro.props;
const { slug } = Astro.params;

const author = await getEntry(entry.data.author);
const { Content } = await entry.render();

const layoutProps = {
  locale: entry.data?.locale as keyof typeof Intl.Locale,
  title: entry.data.title,
  description: entry.data?.description,
  pubDate: entry.data?.pubDate,
  authorName: author?.data.name || author?.data.alias,
  authorUrl: `/authors/${author?.data.alias}`,
  isBasedOnUrl: entry.data?.url,
};
---

<Layout {...layoutProps}>
  <Header
    slot="header"
    title={layoutProps.title}
    description={layoutProps.description}
  />

  <CollectionPagination slot="pagination" {...Astro.props} />

  <Content />

  <Byline slot="footer" entry={entry} />

  <Debug item={entry} />
</Layout>
