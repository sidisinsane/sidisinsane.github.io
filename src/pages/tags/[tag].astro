---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

import Layout from "../../layouts/BaseLayout.astro";

import Section from "../../components/Section.astro";
import CollectionNavigation from "../../components/CollectionNavigation.astro";
import Debug from "../../components/Debug.astro";

interface Props {
  entries: CollectionEntry<"snippets">[] | CollectionEntry<"udhr">[];
}

export async function getStaticPaths() {
  const snippets = (await getCollection("snippets", ({ data }) => {
    return data.isDraft !== true;
  })) as CollectionEntry<"snippets">[];

  const udhr = (await getCollection("udhr", ({ data }) => {
    return data.isDraft !== true;
  })) as CollectionEntry<"udhr">[];

  const entries = [...snippets, ...udhr] as
    | CollectionEntry<"snippets">[]
    | CollectionEntry<"udhr">[];

  // Tags
  const udhrTags = [...new Set(udhr.map((entry) => entry.data.tags).flat())];

  const snippetsTags = [
    ...new Set(snippets.map((entry) => entry.data.tags).flat()),
  ];

  const tags = [...snippetsTags, ...udhrTags].sort();

  return tags.map((tag) => {
    const entriesFiltered = entries.filter((entry) =>
      entry.data.tags.includes(tag),
    ) as CollectionEntry<"snippets">[] | CollectionEntry<"udhr">[];
    return {
      params: { tag },
      props: { entries: entriesFiltered },
    };
  });
}

const { tag } = Astro.params;
const { entries } = Astro.props;
---

<Layout title={`${tag}`}>
  <Section title={`${tag}`} description={``} collectionName="tags">
    <CollectionNavigation
      collection={entries}
      hasAuthor={true}
      hasByline={true}
    />
  </Section>

  <Debug item={entries} />
</Layout>
